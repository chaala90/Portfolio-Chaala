{"ast":null,"code":"var _jsxFileName = \"A:\\\\projets developpement\\\\my-portfolio\\\\src\\\\containers\\\\Form\\\\Form.jsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useState, useref } from \"react\";\nimport PropTypes from \"prop-types\";\nimport Button, { BUTTON_TYPES } from \"../../components/Button/Button\";\nimport \"./Form.scss\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst mockContactApi = () => new Promise(resolve => {\n  setTimeout(resolve, 1000);\n});\nconst Form = _ref => {\n  _s();\n  let {\n    onSuccess,\n    onError\n  } = _ref;\n  const [sending, setSending] = useState(false);\n  const sendContact = useCallback(async evt => {\n    evt.preventDefault();\n    setSending(true);\n\n    // We try to call mockContactApi\n    try {\n      await mockContactApi();\n      setSending(false);\n      onSuccess();\n    } catch (err) {\n      setSending(false);\n      onError(err);\n    }\n  }, [onSuccess, onError]);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    id: \"contact-form\",\n    method: \"post\",\n    onSubmit: sendContact,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"label\",\n      htmlFor: \"name\",\n      children: \"Full name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"name\",\n      name: \"name\",\n      placeholder: \"Your Full Name\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"label\",\n      htmlFor: \"email\",\n      children: \"Email Address\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"email\",\n      id: \"email\",\n      name: \"email\",\n      placeholder: \"Your Email Address\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"label\",\n      htmlFor: \"message\",\n      children: \"Message\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      rows: \"6\",\n      placeholder: \"Your Message\",\n      id: \"message\",\n      name: \"message\",\n      required: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      id: \"submit\",\n      type: BUTTON_TYPES.SUBMIT,\n      disabled: sending,\n      children: sending ? \"En cours\" : \"Envoyer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n_s(Form, \"xlCfd/hTPL1r13um4H5Lxem8mPc=\");\n_c = Form;\nForm.propTypes = {\n  onError: PropTypes.func,\n  onSuccess: PropTypes.func\n};\nForm.defaultProps = {\n  onError: () => null,\n  onSuccess: () => null\n};\nexport default Form;\nvar _c;\n$RefreshReg$(_c, \"Form\");","map":{"version":3,"names":["React","useCallback","useState","useref","PropTypes","Button","BUTTON_TYPES","jsxDEV","_jsxDEV","mockContactApi","Promise","resolve","setTimeout","Form","_ref","_s","onSuccess","onError","sending","setSending","sendContact","evt","preventDefault","err","id","method","onSubmit","children","className","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","name","placeholder","required","rows","SUBMIT","disabled","_c","propTypes","func","defaultProps","$RefreshReg$"],"sources":["A:/projets developpement/my-portfolio/src/containers/Form/Form.jsx"],"sourcesContent":["import React, { useCallback, useState, useref } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Button, { BUTTON_TYPES } from \"../../components/Button/Button\";\r\nimport \"./Form.scss\";\r\n\r\nconst mockContactApi = () =>\r\n  new Promise((resolve) => {\r\n    setTimeout(resolve, 1000);\r\n  });\r\n\r\nconst Form = ({ onSuccess, onError }) => {\r\n  const [sending, setSending] = useState(false);\r\n\r\n  const sendContact = useCallback(async (evt) => {\r\n    evt.preventDefault();\r\n    setSending(true);\r\n\r\n    // We try to call mockContactApi\r\n    try {\r\n      await mockContactApi();\r\n      setSending(false);\r\n      onSuccess();\r\n    } catch (err) {\r\n      setSending(false);\r\n      onError(err);\r\n    }\r\n  }, [onSuccess, onError]);\r\n\r\n  return (\r\n    <form id=\"contact-form\" method=\"post\" onSubmit={sendContact}>\r\n      <label className=\"label\" htmlFor=\"name\">Full name</label>\r\n      <input type=\"text\" id=\"name\" name=\"name\" placeholder=\"Your Full Name\" required />\r\n      <label className=\"label\" htmlFor=\"email\">Email Address</label>\r\n      <input type=\"email\" id=\"email\" name=\"email\" placeholder=\"Your Email Address\" required />\r\n      <label className=\"label\" htmlFor=\"message\">Message</label>\r\n      <textarea rows=\"6\" placeholder=\"Your Message\" id=\"message\" name=\"message\" required />\r\n      <Button id=\"submit\" type={BUTTON_TYPES.SUBMIT} disabled={sending}>\r\n        {sending ? \"En cours\" : \"Envoyer\"}\r\n      </Button>\r\n    </form>\r\n  );\r\n};\r\n\r\nForm.propTypes = {\r\n  onError: PropTypes.func,\r\n  onSuccess: PropTypes.func,\r\n};\r\n\r\nForm.defaultProps = {\r\n  onError: () => null,\r\n  onSuccess: () => null,\r\n};\r\n\r\nexport default Form;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}